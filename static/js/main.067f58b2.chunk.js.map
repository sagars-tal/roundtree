{"version":3,"sources":["images/firstsection.svg","Home.jsx","About.jsx","Contact.jsx","Service.jsx","Navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","id","className","to","src","web","About","Contact","Service","Navbar","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","aria-current","classNameName","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mHAAAA,EAAOC,QAAU,IAA0B,0C,uLCgC5BC,EA5BF,WACX,OACE,oCACG,6BAASC,GAAG,SAASC,UAAU,6BAC9B,yBAAKA,UAAU,0BACP,yBAAKA,UAAU,OACX,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,OACf,yBAAKA,UAAU,sFACX,qDACA,wBAAIA,UAAU,QAAd,+FACA,kBAAC,IAAD,CAASC,GAAG,WAAWD,UAAU,yBAAjC,iBAIJ,yBAAKA,UAAU,uDACX,yBAAKE,IAAKC,IAAKH,UAAU,+BCTtCI,EATD,WACZ,OACE,oCACG,yDCMQC,EATC,WACd,OACE,oCACG,8DCMQC,EATC,WACd,OACE,oCACG,2DCqCQC,EAvCA,WACX,OACI,oCAEI,yBAAKP,UAAU,0BACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,wCACX,yBAAKA,UAAU,uBACX,kBAAC,IAAD,CAASA,UAAU,eAAeC,GAAG,KAArC,aACA,4BAAQD,UAAU,iBAAiBQ,KAAK,SAASC,cAAY,WAAWC,cAAY,0BAA0BC,gBAAc,yBAAyBC,gBAAc,QAAQC,aAAW,qBAClL,0BAAMb,UAAU,yBAEpB,yBAAKA,UAAU,2BAA2BD,GAAG,0BACzC,wBAAIC,UAAU,mCACV,wBAAIA,UAAU,YACV,kBAAC,IAAD,CAASA,UAAU,kBAAkBc,eAAa,OAAOb,GAAG,SAA5D,SAQJ,wBAAIc,cAAc,YAClB,kBAAC,IAAD,CAASf,UAAU,WAAWC,GAAG,YAAjC,uB,OCAzBe,EAjBH,WACV,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWrB,IACjC,kBAAC,IAAD,CAAOmB,OAAK,EAACC,KAAK,SAASC,UAAWf,IACtC,kBAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,WAAWC,UAAWb,IACxC,kBAAC,IAAD,CAAOW,OAAK,EAACC,KAAK,WAAWC,UAAWd,IACxC,kBAAC,IAAD,CAAUJ,GAAG,SCRDmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAGFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.067f58b2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/firstsection.3bd97c45.svg\";","import React from 'react';\r\nimport web from \"../src/images/firstsection.svg\"\r\nimport { NavLink } from 'react-router-dom';\r\n \r\nconst Home = () => {\r\n  return(\r\n    <>\r\n       <section id=\"header\" className=\"d-flex align-items-center\">\r\n        <div className=\"container-fluid nav_bg\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-10 mx-auto p-0\">\r\n                        <div className=\"row\">\r\n                        <div className=\"col-lg-6 pt-5 pt-lg-0 order-2 order-lg-1 d-flex justify-content-center flex-column\">\r\n                            <h1>Welcome to Round Tree</h1>\r\n                            <h3 className=\"my-3\">We are the pool of Techies, who belives in quality work along with cutting edge technology.</h3>\r\n                            <NavLink to=\"/contact\" className=\"cstmbtn btn-grad mt-4\">\r\n                                Get in Touch\r\n                            </NavLink>\r\n                        </div>\r\n                        <div className=\"col-lg-6 pt-5 pt-lg-0 order-1 order-lg-2 header-img\">\r\n                            <img src={web} className=\"img-fluid animated\"/>        \r\n                        </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n       </section>\r\n    </>\r\n\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n \r\nconst About = () => {\r\n  return(\r\n    <>\r\n       <h1> Welcome to About page </h1>\r\n    </>\r\n\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import React from 'react';\r\n \r\nconst Contact = () => {\r\n  return(\r\n    <>\r\n       <h1> Welcome to Contact us page </h1>\r\n    </>\r\n\r\n  );\r\n};\r\n\r\nexport default Contact;\r\n","import React from 'react';\r\n \r\nconst Service = () => {\r\n  return(\r\n    <>\r\n       <h1> Welcome to Service page </h1>\r\n    </>\r\n\r\n  );\r\n};\r\n\r\nexport default Service;\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <>\r\n\r\n            <div className=\"container-fluid nav_bg\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-10 mx-auto p-0\">\r\n                        <nav className=\"navbar navbar-expand-lg navbar-light\">\r\n                            <div className=\"container-fluid p-0\">\r\n                                <NavLink className=\"navbar-brand\" to=\"/\">RoundTree</NavLink>\r\n                                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                                    <span className=\"navbar-toggler-icon\"></span>\r\n                                </button>\r\n                                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                                    <ul className=\"navbar-nav ml-auto mb-2 mb-lg-0\">\r\n                                        <li className=\"nav-item\">\r\n                                            <NavLink className=\"nav-link active\" aria-current=\"page\" to=\"/home\">Home</NavLink>\r\n                                        </li>\r\n                                        {/* <li classNameName=\"nav-item\">\r\n                                            <NavLink className=\"nav-link\" to=\"/service\">Services</NavLink>\r\n                                        </li>\r\n                                        <li classNameName=\"nav-item\">\r\n                                        <NavLink className=\"nav-link\" to=\"/about\">About</NavLink>\r\n                                        </li> */}\r\n                                        <li classNameName=\"nav-item\">\r\n                                        <NavLink className=\"nav-link\" to=\"/contact\">Contac Us</NavLink>\r\n                                        </li>\r\n                                        \r\n                                    </ul>\r\n                                </div>\r\n                            </div>\r\n                        </nav>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Navbar;","import React from 'react';\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport \"../node_modules/bootstrap/dist/js/bootstrap.bundle\";\nimport \"./scss/main.css\";\nimport Home from './Home';\nimport About from './About';\nimport Contact from './Contact';\nimport Service from './Service';\nimport Navbar from './Navbar';\nimport { Switch, Route, Redirect } from 'react-router-dom';\n \nconst App = () => {\n  return(\n    <>\n      <Navbar />\n      <Switch>\n        <Route exact path='/' component={Home}/>\n        <Route exact path=\"/about\" component={About}/>\n        <Route exact path=\"/service\" component={Service}/>\n        <Route exact path=\"/contact\" component={Contact}/>\n        <Redirect to=\"/\" />\n      </Switch>\n       \n    </>\n\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport \"./scss/main.css\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>  \n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}